/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
/// <reference types="bn.js" />
import type { Option } from '@polkadot/types';
import type { AccountId } from '@polkadot/types/interfaces';
import type { BN } from '@polkadot/util';
import type { CtypeCtypeEntry } from '@kiltprotocol/augment-api';
import type { CTypeHash, DidUri, ICType } from '@kiltprotocol/types';
/**
 * Encodes the provided CType for use in `api.tx.ctype.add()`.
 *
 * @param cType The CType to write on the blockchain.
 * @returns Encoded CType.
 */
export declare function toChain(cType: ICType): string;
/**
 * Encodes the provided CType['$id'] for use in `api.query.ctype.ctypes()`.
 *
 * @param cTypeId The CType id to translate for the blockchain.
 * @returns Encoded CType id.
 */
export declare function idToChain(cTypeId: ICType['$id']): CTypeHash;
/**
 * The details of a CType that are stored on chain.
 */
export interface CTypeChainDetails {
    /**
     * The DID of the CType's creator.
     */
    creator: DidUri;
    /**
     * The block number in which the CType was created.
     */
    createdAt: BN;
}
export declare type ICTypeDetails = {
    cType: ICType;
} & CTypeChainDetails;
/**
 * Decodes the CType details returned by `api.query.ctype.ctypes()`.
 *
 * @param encoded The data from the blockchain.
 * @returns An object indicating the CType creator.
 */
export declare function fromChain(encoded: Option<AccountId>): Pick<CTypeChainDetails, 'creator'>;
/**
 * Decodes the CType details returned by `api.query.ctype.ctypes()`.
 *
 * @param encoded The data from the blockchain.
 * @returns An object indicating the CType creator and createdAt block.
 */
export declare function fromChain(encoded: Option<CtypeCtypeEntry>): CTypeChainDetails;
/**
 * Resolves a CType identifier to the CType definition by fetching data from the block containing the transaction that registered the CType on chain.
 *
 * @param cTypeId CType ID to use for the query. It is required to complement the information stored on the blockchain in a [[CtypeCtypeEntry]].
 *
 * @returns The [[ICTypeDetails]] as the result of combining the on-chain information and the information present in the tx history.
 */
export declare function fetchFromChain(cTypeId: ICType['$id']): Promise<ICTypeDetails>;
