"use strict";
/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateUri = exports.parse = void 0;
const utils_1 = require("@kiltprotocol/utils");
// Matches AssetDIDs as per the [AssetDID specification](https://github.com/KILTprotocol/spec-asset-did).
const ASSET_DID_REGEX = /^did:asset:(?<chainId>(?<chainNamespace>[-a-z0-9]{3,8}):(?<chainReference>[-a-zA-Z0-9]{1,32}))\.(?<assetId>(?<assetNamespace>[-a-z0-9]{3,8}):(?<assetReference>[-a-zA-Z0-9]{1,64})(:(?<assetInstance>[-a-zA-Z0-9]{1,78}))?)$/;
/**
 * Parses an AssetDID uri and returns the information contained within in a structured form.

 * @param assetDidUri An AssetDID uri as a string.
* @returns Object containing information extracted from the AssetDID uri.
 */
function parse(assetDidUri) {
    const matches = ASSET_DID_REGEX.exec(assetDidUri)?.groups;
    if (!matches) {
        throw new utils_1.SDKErrors.InvalidDidFormatError(assetDidUri);
    }
    const { chainId, assetId } = matches;
    return {
        ...matches,
        uri: `did:asset:${chainId}.${assetId}`,
    };
}
exports.parse = parse;
/**
 * Checks that a string (or other input) is a valid AssetDID uri.
 * Throws otherwise.
 *
 * @param input Arbitrary input.
 */
function validateUri(input) {
    if (typeof input !== 'string') {
        throw new TypeError(`Asset DID string expected, got ${typeof input}`);
    }
    parse(input);
}
exports.validateUri = validateUri;
